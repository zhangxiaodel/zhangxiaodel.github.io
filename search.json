[{"title":"HashedDict","url":"/2020/07/24/HashedDict/","content":"<h4 id=\"自定义字典\"><a href=\"#自定义字典\" class=\"headerlink\" title=\"自定义字典\"></a>自定义字典</h4><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashedDict</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        自定义hashtable</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, size=<span class=\"number\">10</span></span>):</span></span><br><span class=\"line\">        self.hash_list = [<span class=\"built_in\">list</span>() <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(size)]</span><br><span class=\"line\">        self.size = size</span><br><span class=\"line\">        self.length = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setitem__</span>(<span class=\"params\">self, key, value</span>):</span></span><br><span class=\"line\">        hash_key = <span class=\"built_in\">hash</span>(key) % self.size</span><br><span class=\"line\">        sub_list = self.hash_list[hash_key]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sub_list:</span><br><span class=\"line\">        \t\t<span class=\"comment\"># hash冲突时使用list向后追加元素 </span></span><br><span class=\"line\">            matched=<span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sub_list:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> item[<span class=\"number\">0</span>] == key:</span><br><span class=\"line\">                    item[<span class=\"number\">1</span>] = value</span><br><span class=\"line\">                    matched=<span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matched:</span><br><span class=\"line\">                sub_list.append([key, value])</span><br><span class=\"line\">                self.length += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            sub_list.append([key, value])</span><br><span class=\"line\">            self.length += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span>(<span class=\"params\">self, key</span>):</span></span><br><span class=\"line\">        sub_list = self.hash_list[<span class=\"built_in\">hash</span>(key) % self.size]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sub_list:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sub_list:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> item[<span class=\"number\">0</span>] == key:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> item[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> KeyError(key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__contains__</span>(<span class=\"params\">self, key</span>):</span></span><br><span class=\"line\">        sub_list = self.hash_list[<span class=\"built_in\">hash</span>(key) % self.size]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sub_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item[<span class=\"number\">0</span>] == key:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> sub_list <span class=\"keyword\">in</span> self.hash_list:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sub_list:</span><br><span class=\"line\">                result.append(<span class=\"built_in\">str</span>(item[<span class=\"number\">0</span>] + <span class=\"string\">&quot;:&quot;</span> + <span class=\"built_in\">str</span>(item[<span class=\"number\">1</span>])))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;,&quot;</span>.join(result)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">items</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> sub_list <span class=\"keyword\">in</span> self.hash_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> sub_list:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> innitem <span class=\"keyword\">in</span> sub_list:</span><br><span class=\"line\">                <span class=\"keyword\">yield</span> innitem</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">values</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> sub_list <span class=\"keyword\">in</span> self.hash_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> sub_list:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> innitem <span class=\"keyword\">in</span> sub_list:</span><br><span class=\"line\">                <span class=\"keyword\">yield</span> innitem[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.length</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__repr__()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h6><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_it</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;test begin&#x27;</span>)</span><br><span class=\"line\">    dd = HashedDict()</span><br><span class=\"line\">    dd[<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    dd[<span class=\"string\">&#x27;b&#x27;</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    print(dd)</span><br><span class=\"line\">    print(<span class=\"built_in\">len</span>(dd))</span><br><span class=\"line\">    print(<span class=\"built_in\">repr</span>(dd))</span><br><span class=\"line\">    print(<span class=\"built_in\">list</span>(dd.items()))</span><br><span class=\"line\">    print(<span class=\"built_in\">list</span>(dd.values()))</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;test end&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n","tags":["dict, hash"]},{"title":"数据导出\\导入","url":"/2019/08/11/db-1/","content":"<h3 id=\"mysqldump\"><a href=\"#mysqldump\" class=\"headerlink\" title=\"mysqldump\"></a>mysqldump</h3><ul>\n<li><p><strong>-t</strong> 只导出数据 ,不导结构 , --skip-lock-tables 不锁表</p>\n<blockquote>\n<p>mysqldump -h127.0.0.1 -P3306 -uuser -ppwd -t --skip-lock-tables  test tab1&gt;tab1.sql</p>\n</blockquote>\n</li>\n<li><p><strong>-d</strong> 只备份结构  <strong>--skip-add-drop-table</strong> 禁用drop tabe(默认会有drop table)</p>\n<blockquote>\n<p>mysqldump -hlocalhost -P3306 -uuser -ppwd -d  --skip-add-drop-table test tab1&gt; test.tab1.sql</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>整库备份</p>\n<blockquote>\n<p>mysqldump -hlocalhost -P3306 -uuser -ppwd  -B test  &gt; test.sql</p>\n</blockquote>\n</li>\n<li><p>重要参数</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-B：指定多个库，在备份文件中增加建库语句和use语句</span><br><span class=\"line\">--compact：去掉备份文件中的注释，适合调试，生产场景不用</span><br><span class=\"line\">-A：备份所有库</span><br><span class=\"line\">-F：刷新binlog日志</span><br><span class=\"line\">--master-data：在备份文件中增加binlog日志文件名及对应的位置点</span><br><span class=\"line\">-x  --lock-all-tables：锁表</span><br><span class=\"line\">-l：只读锁表</span><br><span class=\"line\">-d：只备份表结构</span><br><span class=\"line\">-t：只备份数据</span><br><span class=\"line\">--single-transaction：适合innodb事务数据库的备份</span><br><span class=\"line\">   InnoDB表在备份时，通常启用选项--single-transaction来保证备份的一致性，原理是设定本次会话的隔离级别为Repeatable read，来保证本次会话（也就是dump）时，不会看到其它会话已经提交了的数据。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"导入备份数据\"><a href=\"#导入备份数据\" class=\"headerlink\" title=\"导入备份数据\"></a>导入备份数据</h3></li>\n<li><p>命令行导入</p>\n<blockquote>\n<p>mysql -hlocalhost -P3306 -uuser -ppwd test  &lt; test.test.sql</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><ul>\n<li>命令行查询<blockquote>\n<p>mysql -hlocalhost -P3306 -uroot -p123456  -e &quot;use test; set names utf8; select * from img_library limit 10;&quot; &gt; tmp.xls</p>\n</blockquote>\n</li>\n</ul>\n","tags":["数据库,备份"]},{"title":"celery分布式异步任务队列","url":"/2019/10/18/celery-123/","content":"<p>celery是一个基于分布消息传递的异步任务队列.它一定需要建立在一个分布的消息传递机制上，这个消息传递机制就是celery文档里常说的broker。</p>\n<p>celery隐藏了rabbitmq接口的实现细节，既充当了publisher（client）又充当了consumer (worker)的角色。</p>\n<p>&#39;&#39;&#39;思考一下，如果我们用rabbitmq自己实现任务队列，有一天我们不想用rabbit了怎么办？我们换个思维，如果没有celery，让你自己设计一个异步任务队列你怎么做。首先，要有一个发起任务的client，选定一定保存任务信息的媒介，由一个worker去一直监听这个信息媒介，这个worker最好是多进程的，另外可以兼容尽可能多得信息媒介。好吧，这个不就是celery所做的事儿么，celery兼容多个broker，既是任务发起者又是执行者，另外支持多进程…还有好多通用功能考虑。<br>&#39;&#39;&#39;</p>\n<p>假设项目的目录结构是:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">task--</span><br><span class=\"line\">    --celeryapp</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动消费者</span></span><br><span class=\"line\">celery -A task.celeryapp worker -l info  -c 5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费者异常退出后 ,正常情况下重启后会继续消息已经积压的任务, 看情况要将过期任务清除</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动web监控</span></span><br><span class=\"line\">celery -A task.celeryapp flower -l info --basic_auth=user1:111111</span><br><span class=\"line\">flower -A task.celeryapp --port=8091</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动Beat进程,定时任务, 定时将任务发送到broker</span></span><br><span class=\"line\">celery beat -A task.celeryapp -l info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时启动 消费者和定时任务</span></span><br><span class=\"line\">celery -B -A task.celeryapp  worker -l info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以在当前目录的上一层来启动 需指定 package.celeryapp</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动 定时任务和消费者</span></span><br><span class=\"line\">celery multi restart w1 -B -A task.celeryapp -l info</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># celery status -A celery_task</span></span><br><span class=\"line\">celery -A task.celeryapp inspect stats</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># celery.send_task()这个方法解决了producer和consumer的网路拓扑传递数据问题。</span></span><br><span class=\"line\">celery=Celery()</span><br><span class=\"line\">celery.config_from_object(<span class=\"string\">&#x27;task.celeryconfig&#x27;</span>)</span><br><span class=\"line\">celery.send_task(<span class=\"string\">&#x27;tq.tasks.test&#x27;</span>, (<span class=\"string\">&quot;hello world&quot;</span>,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一般调用方法</span></span><br><span class=\"line\">from task.tasks import <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> test.delay(<span class=\"string\">&#x27;param from invoke &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止正在执行的任务</span></span><br><span class=\"line\"><span class=\"comment\"># 使用方法名调用 可以避免依赖方法的实现代码</span></span><br><span class=\"line\">...</span><br><span class=\"line\">celery.config_from_object(<span class=\"string\">&#x27;task.celeryconfig&#x27;</span>)</span><br><span class=\"line\">from celery.task.control import revoke</span><br><span class=\"line\">revoke(<span class=\"string\">&#x27;aac00b9c-f701-4a21-bed4-53a8b865a39a&#x27;</span>, terminate=True)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">from celery.result import AsyncResult</span><br><span class=\"line\">res=AsyncResult(t.task_id)</span><br><span class=\"line\">res.state</span><br><span class=\"line\">&lt;!----&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">res.revoke(terminate=True)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置信息</span></span><br><span class=\"line\">json.dumps(celeryapp.control.inspect().conf(), indent=2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 已注册的任务列表(得到的列表可以在web页面上做处理, 文件手动触发)</span></span><br><span class=\"line\">celeryapp.control.inspect().registered_tasks()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 任务执行情况</span></span><br><span class=\"line\">celeryapp.control.inspect().active()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 任务执行情况</span></span><br><span class=\"line\">celeryapp.control.inspect().stats()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在使用flower时遇到  &#39;stats&#39; inspect method failed , 最终通安装指定版本的kombu 解决 4.5.0</span><br><span class=\"line\">pipenv install kombu&#x3D;&#x3D;4.5.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","tags":["celery ,  flower , redis"]},{"title":"pyenv python2.7/3.6 共存/切换实践","url":"/2019/08/28/env_py/","content":"<p>在docker(python27) 环境中</p>\n<blockquote>\n<p>参考 <a href=\"https://www.jianshu.com/p/3e93311fe6cb\">简书-pyenv 让 python 版本完美切换</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/pyenv/pyenv-virtualenv\">更多见github/pyenv-virtualenv</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search python</span><br><span class=\"line\">&gt;&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull centos/python-27-centos7</span><br><span class=\"line\"></span><br><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--运行docker 环境 --&gt;</span><br><span class=\"line\">docker run -i -t centos/python-27-centos7 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--继续配置环境...  --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--首先把项目克隆下来，放在家目录下的隐藏文件夹中：.pyenv--&gt;</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/pyenv/pyenv.git ~/.pyenv</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--配置环境变量 ,依次执行如下命令--&gt;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n eval &quot;$(pyenv init -)&quot;\\nfi&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--安装 pyenv-virtualenv--&gt;</span><br><span class=\"line\">&lt;!--插件克隆在刚才已经安装完毕的 pyenv 的 plugins 文件夹中--&gt;</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--开始使用 pyenv--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">pyenv version/versions(查看本地安装的python版本)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- pyenv install 敲tag ,可列出支持的版本 --&gt;</span><br><span class=\"line\">pyenv install 3.6.8</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--如果失败,可安装依赖的包--&gt;</span><br><span class=\"line\">sudo yum install gcc zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel tk-devel libffi-devel</span><br><span class=\"line\"></span><br><span class=\"line\">pyenv versions</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--pyenv 托管 python 版本，virtualenv 使用 python 版本--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--创建虚拟环境--&gt;</span><br><span class=\"line\">pyenv virtualenv 3.6.8 venv3.6.8</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--激活, 在docker中,发现activate 并不能成功切换环境 ,最终使用 <span class=\"built_in\">local</span> 可以完成切换 --&gt;</span><br><span class=\"line\">&lt;!--<span class=\"built_in\">local</span> 命令,会在目标文件夹中生成 .python-version 文件, 文件内容是 venv3.6.8, 这样只要进入目录就会自动激活环境 --&gt;</span><br><span class=\"line\">pyenv activate venv3.6.8</span><br><span class=\"line\">pyenv <span class=\"built_in\">local</span>  venv3.6.8</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--查看pip 安装目录 --&gt;</span><br><span class=\"line\">pip --version</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--更新pyenv --&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/.pyenv 或者 <span class=\"built_in\">cd</span> $(pyenv root)</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--卸载 pyenv--&gt;</span><br><span class=\"line\">1. 要删除环境变量</span><br><span class=\"line\">2. rm -rf ~/.pyenv</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--继续配置环境..., 在另一个窗口中将当前docker 保存成镜像, 方便以后使用  --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">docker commit 8bacc8c47607(docker ps.pid) centos_pyenv_368</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","tags":["pyenv, python3.6 ,虚拟环境"]},{"title":"第一次为开源项目贡献pull request ,并被作者采用","url":"/2020/12/08/first-pr/","content":"<h4 id=\"第一次为开源项目贡献pull-request-并被作者采用\"><a href=\"#第一次为开源项目贡献pull-request-并被作者采用\" class=\"headerlink\" title=\"第一次为开源项目贡献pull request ,并被作者采用\"></a>第一次为开源项目贡献pull request ,并被作者采用</h4><p>项目地址: <a href=\"https://github.com/Shelnutt2/db2struct/\">Shelnutt2/db2struct</a> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">    在golang的学习实践中用到了 ORM框架 GORM,  是一个优秀的开源框架, star人数很高, 在编写与之对应的mode对象时, 就自然遇到了由mysql数据表生成model的需求,</span><br><span class=\"line\">在github上找到这 Shelnutt2&#x2F;db2struct 这个开源项目, 太感谢作者了, 解决了这一痛点问题.</span><br><span class=\"line\">    随着对代码的深入,发现db2struct 还可以有两点改进, 所以有了此次的修改,以及pull request  , 分两次解决了如下的改进, </span><br><span class=\"line\">    作者也有nice,并最终合并的pr .</span><br><span class=\"line\">    1 由table生成的model中的字段默认是按字段名排序的, 我们更希望的是以数据表ddl 的顺序为准 </span><br><span class=\"line\">    2 model 的tag 并未指定column ,这样在遇到非默认字段名规则时会关联失败 </span><br><span class=\"line\">    3 还有一个小改进,就是把ddl的comment 添加到model中</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"/images/git_pullrequest_20201208_30.png\" alt=\"pr preview\" loading=\"lazy\"></p>\n","tags":["pr, pull request"]},{"title":"使用itsdangerous生成临时身份令牌","url":"/2019/08/19/flask_123/","content":"<h3 id=\"使用itsdangerous生成临时身份令牌\"><a href=\"#使用itsdangerous生成临时身份令牌\" class=\"headerlink\" title=\"使用itsdangerous生成临时身份令牌\"></a>使用itsdangerous生成临时身份令牌</h3><p>在需要身份验证的场景中,可以利用token , 主要流程是由email 向用户下发token, 用户收到邮件证明是本人, 用户点击带有token的链接地址,将token上传后后台 , 后台验证token, 从token中解析出用户信息, 完成一个完整的用户身份验证</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itsdangerous</span><br><span class=\"line\">salt=<span class=\"string\">&#x27;111&#x27;</span></span><br><span class=\"line\">t=itsdangerous.TimedJSONWebSignatureSerializer(salt, expires_in=<span class=\"number\">20</span>)</span><br><span class=\"line\">res= t.dumps(&#123;<span class=\"string\">&#x27;sid&#x27;</span>:<span class=\"string\">&#x27;flight&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;eyJhbGciOiJIUzI1NiIsImV4cCI6MTU2NjE5NDQwOSwiaWF0IjoxNTY2MTk0Mzg5fQ.eyJzaWQiOiJmbGlnaHQifQ.z-56NiU93Jvuus4dezdBcCmveVEBFaqCyHShJPjvgxs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">t.loads(tes)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;<span class=\"string\">u&#x27;sid&#x27;</span>: <span class=\"string\">u&#x27;flight&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;!--过期或改变令牌的任意字符 将失败--&gt;</span><br><span class=\"line\">SignatureExpired: Signature expired</span><br><span class=\"line\">BadSignature: Signature <span class=\"string\">&#x27;GCkAmN6DEOW_oUteJStX8N93W99z_RqMcAOvINpsQd8a&#x27;</span> does <span class=\"keyword\">not</span> match</span><br></pre></td></tr></table></figure>\n\n\n\n","tags":["web, flask ,token"]},{"title":"Flask 请求处理流程","url":"/2019/09/05/flask_request_process123/","content":"<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sockerserver.py.BaseServer.server_forever._handle_request_noblock()</span><br><span class=\"line\">           .process_request.finish_request()</span><br><span class=\"line\">           .BaseRequestHandle.__init__().handle()</span><br><span class=\"line\">            werkzeug.serving.py.WSGIRequestHandler.BaseHTTPRequestHandler.handle().handle_one_request().parse_requests().run_wsgi()</span><br><span class=\"line\">                                                         .execute(app)</span><br><span class=\"line\">            werkzeug.debug.DebuggedApplication.__call__().Request(environ).response(environ, start_response)</span><br><span class=\"line\">                            werkzeug.serving.execute(<span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> application_iter:).__call__().run_wsgi()</span><br><span class=\"line\">                                            .wsgi_app().request_contex()</span><br><span class=\"line\">                                flask.ctx.py.push().app_ctx.push(**match_request会将当前请求的地址request.url 用正则解析成路由配置表中的数据及参数 **).session_interface.open_session(app, request)</span><br><span class=\"line\">                                flask.full_dispatch_request().preprocess_request()</span><br><span class=\"line\">                                                        .dispatch_request().view_functions(<span class=\"string\">&#x27;业务处理&#x27;</span>)</span><br><span class=\"line\">                                    .finalize_request(rv).make_response()</span><br><span class=\"line\">                                                    .process_response(response).session_interface.save_session()</span><br><span class=\"line\"></span><br><span class=\"line\">                            werkzeug.wsgi_app().<span class=\"keyword\">return</span> response()</span><br><span class=\"line\">                                            .ctx.auto_pop(error)</span><br><span class=\"line\"></span><br><span class=\"line\">            .shutdown_request(request)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/flask-werkzuge-123.png\" loading=\"lazy\"></p>\n","tags":["flask, request"]},{"title":"利用有缓冲通道写满时阻塞的特点来控制协程的并发数量","url":"/2020/12/16/go1-goroutinepool/","content":"<h4 id=\"利用有缓冲通道写满时阻塞的特点来控制协程的并发数量\"><a href=\"#利用有缓冲通道写满时阻塞的特点来控制协程的并发数量\" class=\"headerlink\" title=\"利用有缓冲通道写满时阻塞的特点来控制协程的并发数量\"></a>利用有缓冲通道写满时阻塞的特点来控制协程的并发数量</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> LineGraber <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//最多允许n个并发同时执行</span></span><br><span class=\"line\">\tConcurrentNum <span class=\"keyword\">int</span> <span class=\"string\">`json:&quot;concurrent_num&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(grab LineGraber)</span> <span class=\"title\">Work</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &quot;work start&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最少5个协程一起工作</span></span><br><span class=\"line\">concurrentNum := grab.ConcurrentNum</span><br><span class=\"line\"><span class=\"keyword\">if</span> concurrentNum &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    concurrentNum = <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// sem通道容量限制了并发的协程数</span></span><br><span class=\"line\">sem := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;, concurrentNum)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 准备待处理的任务列表  </span></span><br><span class=\"line\">taskLst := grab.buildTaskLst()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口任务处理结果的通道</span></span><br><span class=\"line\">chanRespv := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"built_in\">len</span>(taskLst))</span><br><span class=\"line\"></span><br><span class=\"line\">total := <span class=\"built_in\">len</span>(taskLst)</span><br><span class=\"line\"><span class=\"comment\">// log info fmt.Sprintf(&quot;tasksize:%d&quot;, total) </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\"><span class=\"keyword\">for</span> idx, key := <span class=\"keyword\">range</span> taskLst &#123;</span><br><span class=\"line\">    wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(taskv <span class=\"keyword\">string</span>, i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 确保 wg.Done() (与add对应), </span></span><br><span class=\"line\">   <span class=\"comment\">//     &lt;-sem, 从semchan中取出(与下面 sem&lt;- struct&#123;&#125;&#123;&#125;对应)</span></span><br><span class=\"line\">        <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            wg.Done()</span><br><span class=\"line\">            &lt;-sem</span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\">        sem &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">        <span class=\"comment\">// 真实业务逻辑部分 </span></span><br><span class=\"line\">        <span class=\"comment\">// 方法中要将结果写入到chanRespv </span></span><br><span class=\"line\">        <span class=\"comment\">// log info i, taskv </span></span><br><span class=\"line\">        grab.processTask(taskv, oneproxy, chanRespv)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;(key, idx)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">wg.Wait()</span><br><span class=\"line\"><span class=\"built_in\">close</span>(chanRespv)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// range 可以从已经关闭的chan 中读取原有数据, 并退出  </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> respv := <span class=\"keyword\">range</span> chanRespv &#123;</span><br><span class=\"line\">    <span class=\"comment\">// log info read from chanResp</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> respResult RespResult</span><br><span class=\"line\">    err := json.Unmarshal([]<span class=\"keyword\">byte</span>(respv), &amp;respResult)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// log error decode异常 </span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// process ... </span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// log info (&quot;work done&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上方法中在 wg.Wait之后才开始接收 chanRespv ,其实还可以优化\\尽早提前处理chanRespv(可以及时读取到结果,避免所有任务完成后才读取到结果的情况), 只需新启协程在wg.Wait 之前接收处理 . </span></span><br><span class=\"line\"><span class=\"comment\">// 要增加另外一个通道, 控制完成并退出的信号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在wg.wait 之前 </span></span><br><span class=\"line\">chanSignal := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> result, ok := &lt;-limiter.resultChan:</span><br><span class=\"line\">            common.ZLogger.Info(<span class=\"string\">&quot;done&quot;</span>, zap.Any(<span class=\"string\">&quot;result&quot;</span>, result))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">                common.ZLogger.Info(<span class=\"string\">&quot;result通道关闭,退出当前goroutine&quot;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 通知主线程,可以继续向下执行了 </span></span><br><span class=\"line\">                chanSignal&lt;- <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在程序最后添加 </span></span><br><span class=\"line\">&lt;-chanSignal</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 业务逻辑处理  </span></span><br><span class=\"line\"><span class=\"comment\">// 注意chan 类型是只可写入 chan &lt;-  string  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(grab LineGraber)</span> <span class=\"title\">processTask</span><span class=\"params\">(key <span class=\"keyword\">string</span>, proxy <span class=\"keyword\">string</span>, outchan <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\taimUrl := fmt.Sprintf(grap_base_url, key)</span><br><span class=\"line\">\trespv, err := doget... </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// log error ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//log info ... </span></span><br><span class=\"line\">\toutchan &lt;- respv</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","tags":["goroutine go pool 并发 协程"]},{"title":"自实现 Goroutine pool","url":"/2020/12/16/go2-goroutinepool-limiter/","content":"<h4 id=\"自实现-Goroutine-pool\"><a href=\"#自实现-Goroutine-pool\" class=\"headerlink\" title=\"自实现 Goroutine pool\"></a>自实现 Goroutine pool</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// limiter.go </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> limiter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;go.uber.org/zap&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;station.grab/src/common&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// MinimaLimit is the minimal concurrency limit</span></span><br><span class=\"line\">\tMinimaLimit = <span class=\"number\">5</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Job is an interface for add jobs.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Job <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tRun() (resp <span class=\"keyword\">string</span>, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EasyLimiter object</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> EasyLimiter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsemp <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125; <span class=\"comment\">// 控制并发的chan</span></span><br><span class=\"line\"></span><br><span class=\"line\">\twg sync.WaitGroup <span class=\"comment\">// waitGroup 用于等待协程执行完成, 并关闭通道\\清理资源</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tjobChan    <span class=\"keyword\">chan</span> Job         <span class=\"comment\">// Job 队列(实现接口即可, 解耦了任务的具体实现)</span></span><br><span class=\"line\">\tresultChan <span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"comment\">// job执行结果队列</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewEasyLimiter</span><span class=\"params\">(taskCount, limit <span class=\"keyword\">int</span>)</span> *<span class=\"title\">EasyLimiter</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> limit &lt;= MinimaLimit &#123;</span><br><span class=\"line\">\t\tlimit = MinimaLimit</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := &amp;EasyLimiter&#123;</span><br><span class=\"line\">\t\tsemp:       <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;, limit),</span><br><span class=\"line\">\t\tresultChan: <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;, taskCount),</span><br><span class=\"line\">\t\tjobChan:    <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> Job, taskCount),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建后马上就监听job队列</span></span><br><span class=\"line\">\t<span class=\"comment\">// job队列中有数据且semp队列未满 (满了会阻塞,以此来实现并发控制), 则取出job对象, 交给单独协程处理</span></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> job := <span class=\"keyword\">range</span> c.jobChan &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//c.semp &lt;- struct&#123;&#125;&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> c.semp &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;:</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> &lt;-time.After(time.Millisecond * <span class=\"number\">200</span>):</span><br><span class=\"line\">\t\t\t\tcommon.ZLogger.Info(<span class=\"string\">&quot;goroutine pool full, wait for 200 mis  &quot;</span>, zap.Int(<span class=\"string\">&quot;size&quot;</span>, <span class=\"built_in\">len</span>(c.semp)))</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ajob Job)</span></span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\t\tc.wg.Done()</span><br><span class=\"line\">\t\t\t\t\t&lt;-c.semp</span><br><span class=\"line\">\t\t\t\t&#125;()</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//common.ZLogger.Info(&quot;开始执行任务&quot;)</span></span><br><span class=\"line\">\t\t\t\tresult, err := ajob.Run()</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//common.ZLogger.Info(&quot;完成执行任务&quot;)</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tfmt.Printf(<span class=\"string\">&quot;err:%v&quot;</span>, err)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tc.resultChan &lt;- result</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;(job)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcommon.ZLogger.Info(<span class=\"string\">&quot;task队列关闭&quot;</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *EasyLimiter)</span> <span class=\"title\">AddJob</span><span class=\"params\">(job Job)</span></span> &#123;</span><br><span class=\"line\">\tc.wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tc.jobChan &lt;- job</span><br><span class=\"line\">\t<span class=\"comment\">//common.ZLogger.Info(&quot;添加任务&quot;)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *EasyLimiter)</span> <span class=\"title\">Wait</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 关闭job队列 ,此时已不会再添加</span></span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(c.jobChan)</span><br><span class=\"line\">\tc.wg.Wait()</span><br><span class=\"line\">\t<span class=\"comment\">// 关闭result队列,以保证range方式读取chan 程序会正常向下执行</span></span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(c.resultChan)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// limiter_test.go </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> limiter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;go.uber.org/zap&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math/rand&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;station.grab/src/common&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Max</span><span class=\"params\">(a <span class=\"keyword\">int</span>, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"comment\">//注意参数和返回值是怎么声明的</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a &gt; b &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RandomInt</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano())</span><br><span class=\"line\">\tv := rand.Intn(n)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v &lt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\tv = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SampleJob <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttotal <span class=\"keyword\">int</span></span><br><span class=\"line\">\tidx   <span class=\"keyword\">int</span></span><br><span class=\"line\">\tkey   <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s SampleJob)</span> <span class=\"title\">Run</span><span class=\"params\">()</span> <span class=\"params\">(resp <span class=\"keyword\">string</span>, err error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv := fmt.Sprintf(<span class=\"string\">&quot;job run: %d/%d, %v&quot;</span>, s.idx, s.total, s.key)</span><br><span class=\"line\">\tcommon.ZLogger.Info(v)</span><br><span class=\"line\">\t<span class=\"comment\">//time.Sleep(time.Second*time.Duration(RandomInt(5)))</span></span><br><span class=\"line\">\ttime.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestLimiter_Execute</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;begin&quot;</span>)</span><br><span class=\"line\">\ttotal := <span class=\"number\">20</span></span><br><span class=\"line\">\tlimiter := NewEasyLimiter(total, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; total; i++ &#123;</span><br><span class=\"line\">\t\tlimiter.AddJob(&amp;SampleJob&#123;</span><br><span class=\"line\">\t\t\ttotal: total,</span><br><span class=\"line\">\t\t\tidx:   i,</span><br><span class=\"line\">\t\t\tkey:   <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 控制完成并退出的信号</span></span><br><span class=\"line\">\tchanSignal := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> result, ok := &lt;-limiter.resultChan:</span><br><span class=\"line\">\t\t\t\tcommon.ZLogger.Info(<span class=\"string\">&quot;read from result chan &quot;</span>, zap.Any(<span class=\"string\">&quot;result&quot;</span>, result))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t\t\t\tcommon.ZLogger.Info(<span class=\"string\">&quot;result通道关闭,退出当前goroutine&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\tchanSignal&lt;- <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlimiter.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;-chanSignal</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;done&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestRandom</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(RandomInt(<span class=\"number\">5</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","tags":["goroutine go pool 并发 协程"]},{"title":"go test","url":"/2020/12/29/go3-test/","content":"<h4 id=\"使用TestMain-或自定义Test-为测试增加前置-后置方法调用\"><a href=\"#使用TestMain-或自定义Test-为测试增加前置-后置方法调用\" class=\"headerlink\" title=\"使用TestMain 或自定义Test* 为测试增加前置\\后置方法调用\"></a>使用TestMain 或自定义Test* 为测试增加前置\\后置方法调用</h4><ul>\n<li>自定义testFun1, testFun2..方法 , test的t是小写, 这样不会被默认调用</li>\n<li>自定义Test*方法, Test的T 大写, 这样可以被go test 工具识别</li>\n<li>在Test*方法中按顺序 编写 t.Run(&quot;fun_name&quot;, fun)</li>\n<li>编写TestMain方法 , 调用beforeInit, m.Run()(会调用其它Test*方法) afterClear<blockquote>\n<p>不写TestMain方法, 直接在 Test*方法中调用也一样,<br>有TestMain方法时, go test 只会识别 TestMain, 所以要显示调用 m.Run() 来调用其它测试方法 </p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os/exec&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cmd.go  (写在一个文件中方法读代码)</span></span><br><span class=\"line\"><span class=\"comment\">// 待测试方法,</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ExecShell</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\tcmd := exec.Command(<span class=\"string\">&quot;/bin/bash&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, s)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> out bytes.Buffer</span><br><span class=\"line\">\tcmd.Stdout = &amp;out</span><br><span class=\"line\">\terr := cmd.Run()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out.String(), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testExecShell</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tt.Log(<span class=\"string\">&quot;testExecShell&quot;</span>)</span><br><span class=\"line\">\t_, err := ExecShell(<span class=\"string\">&quot;ls&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tt.Error(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testFun1</span><span class=\"params\">(t *testing.T)</span></span>  &#123;</span><br><span class=\"line\">\tt.Log(<span class=\"string\">&quot;testFun1&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">beforeInit</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;beforeInit&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">afterClear</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;afterClear&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestAll</span><span class=\"params\">(t *testing.T)</span></span>  &#123;</span><br><span class=\"line\">\tt.Run(<span class=\"string\">&quot;testExec..&quot;</span>, testExecShell)</span><br><span class=\"line\">\tt.Run(<span class=\"string\">&quot;testfun1&quot;</span>, testFun1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在测试中增加前置/后置函数调用的方法, 思路: 自定义测试的新入口,</span></span><br><span class=\"line\"><span class=\"comment\">// 1 自定义testFun1, testFun2..方法 , test的t是小写, 这样不会被默认调用</span></span><br><span class=\"line\"><span class=\"comment\">// 2 自定义Test*方法, Test的T 大写, 这样可以被go test 工具识别</span></span><br><span class=\"line\"><span class=\"comment\">// 3 在Test*方法中按顺序 编写 t.Run(&quot;fun_name&quot;, fun)</span></span><br><span class=\"line\"><span class=\"comment\">// 4 编写TestMain 方法 , 调用beforeInit, m.Run()(会调用其它Test*方法) afterClear</span></span><br><span class=\"line\"><span class=\"comment\">// 当前不写TestMain方法, 直接在 Test*方法中调用也一样</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestMain</span><span class=\"params\">(m *testing.M)</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;TestMain&quot;</span>)</span><br><span class=\"line\">\tbeforeInit()</span><br><span class=\"line\">\tm.Run()</span><br><span class=\"line\">\tafterClear()</span><br><span class=\"line\">\t<span class=\"comment\">//m.Run()</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; go test -v </span><br><span class=\"line\">---------------------</span><br><span class=\"line\">    TestMain</span><br><span class=\"line\">beforeInit</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D; RUN   TestAll</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D; RUN   TestAll&#x2F;testExec..</span><br><span class=\"line\">    cmd_test.go:25: testExecShell</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D; RUN   TestAll&#x2F;testfun1</span><br><span class=\"line\">    cmd_test.go:33: testFun1</span><br><span class=\"line\">--- PASS: TestAll (0.01s)</span><br><span class=\"line\">    --- PASS: TestAll&#x2F;testExec.. (0.01s)</span><br><span class=\"line\">    --- PASS: TestAll&#x2F;testfun1 (0.00s)</span><br><span class=\"line\">PASS</span><br><span class=\"line\">afterClear</span><br><span class=\"line\">ok      com.huoli.saas-manager&#x2F;src&#x2F;common&#x2F;util&#x2F;test     0.022s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","tags":["go test TestMain"]},{"title":"go test -v","url":"/2019/08/07/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<hr>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"singleflight在并发场景下保护下游业务","url":"/2021/01/07/go4-singleflight/","content":"<h3 id=\"singleflight-使用场景\"><a href=\"#singleflight-使用场景\" class=\"headerlink\" title=\"singleflight 使用场景\"></a>singleflight 使用场景</h3><blockquote>\n<p>针对同一业务的同一批请求(需自定义缓存的 key),只放一个请求去执行，其他等待结果(和普通缓存还不一样), 可以在不使用缓存的情况下,保护下游业务；</p>\n</blockquote>\n<blockquote>\n<p>例如 1：在有缓存的数据读取场景中,缓存过期失效时且大并发场景中,瞬间会有大量请求压到数据库,当设置上缓存后才会恢复.但如果去数据库当中查询数据\\内存中计算组装\\设置缓存等操作耗时稍长,同样会存在很大的风险，瞬间的巨量数据库访问,可能会使数据库异常。</p>\n</blockquote>\n<blockquote>\n<p>例如 1：同上,在无缓存的场景中, 如果一个业务完成处理需要 1s, 100 并发情况下, 这 1s 内都会被到服务器执行, 用 singleflight 只会有一个请求被真正处理, 其它的会等 1s(第一个请求处理完成),直接取第一个请求的处理结果 .<br><a href=\"https://studygolang.com/articles/11063\">golang singleflight 用武之地,杨锡坤 2017-09-17</a>如果每个请求都落到下游服务，通常会导致下游服务瞬时负载升高。如果使用缓存，如何判断当前接口请求的内容需要缓存下来？缓存的过期、更新问题？</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现原理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *Group)</span> <span class=\"title\">Do</span><span class=\"params\">(key <span class=\"keyword\">string</span>, fn <span class=\"keyword\">func</span>()</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span>) <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\">    g.mu.Lock()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> g.m == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        g.m = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*call)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> c, ok := g.m[key]; ok &#123;</span><br><span class=\"line\">        g.mu.Unlock()</span><br><span class=\"line\">        c.wg.Wait() <span class=\"comment\">//其他的请求阻塞</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c.val, c.err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c := <span class=\"built_in\">new</span>(call)</span><br><span class=\"line\">    c.wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">    g.m[key] = c</span><br><span class=\"line\">    g.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">    c.val, c.err = fn() <span class=\"comment\">//第一个去执行调用</span></span><br><span class=\"line\">    c.wg.Done() <span class=\"comment\">//同一批都返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">    g.mu.Lock()</span><br><span class=\"line\">    <span class=\"built_in\">delete</span>(g.m, key)</span><br><span class=\"line\">    g.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c.val, c.err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sample</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestDoDupSuppress</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> g singleflight.Group</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> calls <span class=\"keyword\">int32</span></span><br><span class=\"line\">\tfn := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;inprocess %d\\n&quot;</span>, calls)</span><br><span class=\"line\">\t\tatomic.AddInt32(&amp;calls, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 模拟耗时</span></span><br><span class=\"line\">        time.Sleep(time.Second * <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\">//  回写返回结果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;ok&quot;</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> n = <span class=\"number\">30</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(j <span class=\"keyword\">int</span>)</span></span> &#123; <span class=\"comment\">// n个协程同时调用了g.Do，fn中的逻辑只会被一个协程执行</span></span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;before request %d\\n&quot;</span>, j)</span><br><span class=\"line\">\t\t\tv, err := g.Do(<span class=\"string\">&quot;key&quot;</span>, fn)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">&quot;after  request %d, %#v\\n&quot;</span>, j, v)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Printf(<span class=\"string\">&quot;Do error: %v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\twg.Done()</span><br><span class=\"line\">\t\t&#125;(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;done calls= %d\\n&quot;</span>, calls)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["singleflight goroutine"]},{"title":"常见的Web攻击手段之CSRF攻击","url":"/2019/08/31/httponly/","content":"<h1 id=\"安全-常见的Web攻击手段之CSRF攻击-转载\"><a href=\"#安全-常见的Web攻击手段之CSRF攻击-转载\" class=\"headerlink\" title=\"安全|常见的Web攻击手段之CSRF攻击(转载)\"></a>安全|常见的Web攻击手段之CSRF攻击(转载)</h1><!-- 作者区域 -->\n\n\n<p><a href=\"https://www.jianshu.com/p/67408d73c66d\">转载自简书</a></p>\n<!-- 文章内容 -->\n\n<p>对于常规的Web攻击手段，如XSS、CRSF、SQL注入、（常规的不包括文件上传漏洞、DDoS攻击）等，防范措施相对来说比较容易，对症下药即可，比如XSS的防范需要转义掉输入的尖括号，防止CRSF攻击需要将cookie设置为httponly，以及增加session相关的Hash token码 ，SQL注入的防范需要将分号等字符转义，等等做起来虽然筒单，但却容易被忽视，更多的是需要<strong>从开发流程上来予以保障</strong>（这句话是给技术管理者的建议），以免因人为的疏忽而造成损失。</p>\n<h3 id=\"一、CSRF介绍\"><a href=\"#一、CSRF介绍\" class=\"headerlink\" title=\"一、CSRF介绍\"></a>一、CSRF介绍</h3><p>CSRF攻击的全称是跨站请求伪造（ cross site request forgery)，是一种对网站的恶意利用，尽管听起来跟XSS跨站脚本攻击有点相似，但事实上CSRF与XSS差别很大，XSS利用的是站点内的信任用户，而CSRF则是通过伪装来自受信任用户的请求来利用受信任的网站。你可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义向第三方网站发送恶意请求。 CRSF能做的事情包括利用你的身份发邮件、发短信、进行交易转账等，甚至盗取你的账号。</p>\n<h4 id=\"1-1、CRSF攻击原理\"><a href=\"#1-1、CRSF攻击原理\" class=\"headerlink\" title=\"1.1、CRSF攻击原理\"></a>1.1、CRSF攻击原理</h4><p><img src=\"htts://upload-images.jianshu.io/upload_images/5219651-7af31f65db312f64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/556/format/webp\" loading=\"lazy\"></p>\n<p>CRSF攻击原理</p>\n<ol>\n<li> 首先用户C浏览并登录了受信任站点A；</li>\n<li> 登录信息验证通过以后，站点A会在返回给浏览器的信息中带上已登录的cookie，cookie信息会在浏览器端保存一定时间（根据服务端设置而定）；</li>\n<li> 完成这一步以后，用户在没有登出（清除站点A的cookie）站点A的情况下，访问恶意站点B；</li>\n<li> 这时恶意站点 B的某个页面向站点A发起请求，而这个请求会带上浏览器端所保存的站点A的cookie；</li>\n<li> 站点A根据请求所带的cookie，判断此请求为用户C所发送的。</li>\n</ol>\n<p>因此，站点A会报据用户C的权限来处理恶意站点B所发起的请求，而这个请求可能以用户C的身份发送 邮件、短信、消息，以及进行转账支付等操作，这样恶意站点B就达到了伪造用户C请求站点 A的目的。<br>受害者只需要做下面两件事情，攻击者就能够完成CSRF攻击：</p>\n<ul>\n<li>登录受信任站点 A，并在本地生成cookie；</li>\n<li>在不登出站点A（清除站点A的cookie）的情况下，访问恶意站点B。</li>\n</ul>\n<p>很多情况下所谓的恶意站点，很有可能是一个存在其他漏洞（如XSS）的受信任且被很多人访问的站点，这样，普通用户可能在不知不觉中便成为了受害者。</p>\n<h4 id=\"1-2、攻击举例\"><a href=\"#1-2、攻击举例\" class=\"headerlink\" title=\"1.2、攻击举例\"></a>1.2、攻击举例</h4><p>假设某银行网站A以GET请求来发起转账操作，转账的地址为<code>www.xxx.com/transfer.do?accountNum=l000l&amp;money=10000</code>，参数accountNum表示转账的账户，参数money表示转账金额。<br>而某大型论坛B上，一个恶意用户上传了一张图片，而图片的地址栏中填的并不是图片的地址，而是前而所说的砖账地址：<code>&lt;img src=&quot;http://www.xxx.com/transfer.do?accountNum=l000l&amp;money=10000&quot;&gt;</code><br>当你登录网站A后，没有及时登出，这时你访问了论坛B，不幸的事情发生了，你会发现你的账号里面少了10000块...<br>为什么会这样呢，在你登录银行A时，你的浏览器端会生成银行A的cookie，而当你访问论坛B的时候，页面上的<img>标签需要浏览器发起一个新的HTTP请求，以获得图片资源，当浏览器发起请求时，请求的却是银行A的转账地址<code>www.xxx.com/transfer.do?accountNum=l000l&amp;money=10000</code>，并且会带上银行A的cookie信息，结果银行的服务器收到这个请求后，会以为是你发起的一次转账操作，因此你的账号里边便少了10000块。<br>当然，绝大多数网站都不会使用GET请求来进行数据更新，因此，攻击者也需要改变思路，与时俱进。<br>假设银行将其转账方式改成POST提交，而论坛B恰好又存在一个XSS漏洞，恶意用户在它的页面上植入如下代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;aaa&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://www.xxx.com/transfer.do&quot;</span> <span class=\"attr\">metdod</span>=<span class=\"string\">&quot;POST&quot;</span> <span class=\"attr\">display</span>=<span class=\"string\">&quot;none&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;accountNum&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10001&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;money&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10000&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.forms(<span class=\"string\">&#x27;aaa&#x27;</span>);</span></span><br><span class=\"line\">    form.submit();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果你此时恰好登录了银行A，且没有登出，当你打开上述页面后，脚本会将表单aaa提交，把accountNum和money参数传递给银行的转账地址<code>http://www.xxx.com/transfer.do</code>，同样的，银行以为是你发起的一次转账会从你的账户中扣除10000块。<br>当然，以上只是举例，正常来说银行的交易付款会有USB key、验证码、登录密码和支付密码等一系列屏障，流程比上述流程复杂得多，因此安全系数也高得多。</p>\n<h4 id=\"1-3、CSRF的防御\"><a href=\"#1-3、CSRF的防御\" class=\"headerlink\" title=\"1.3、CSRF的防御\"></a>1.3、CSRF的防御</h4><p><strong>1、尽量使用POST，限制GET</strong><br>GET接口太容易被拿来做CSRF攻击，看上面示例就知道，只要构造一个img标签，而img标签又是不能过滤的数据。接口最好限制为POST使用，GET则无效，降低攻击风险。<br>当然POST并不是万无一失，攻击者只要构造一个form就可以，但需要在第三方页面做，这样就增加暴露的可能性。<br><strong>2、将cookie设置为HttpOnly</strong><br>CRSF攻击很大程度上是利用了浏览器的cookie，为了防止站内的XSS漏洞盗取cookie,需要在cookie中设置“HttpOnly”属性，这样通过程序（如JavaScript脚本、Applet等）就无法读取到cookie信息，避免了攻击者伪造cookie的情况出现。<br>在Java的Servlet的API中设置cookie为HttpOnly的代码如下：<br><code>response.setHeader( &quot;Set-Cookie&quot;, &quot;cookiename=cookievalue;HttpOnly&quot;);</code><br><strong>3、增加token</strong><br>CSRF攻击之所以能够成功，是因为攻击者可以伪造用户的请求，该请求中所有的用户验证信息都存在于cookie中，因此攻击者可以在不知道用户验证信息的情况下直接利用用户的cookie来通过安全验证。由此可知，抵御CSRF攻击的关键在于：<strong>在请求中放入攻击者所不能伪造的信息，并且该信总不存在于cookie之中</strong>。鉴于此，系统开发人员可以在HTTP请求中以参数的形式加入一个随机产生的token，并在服务端进行token校验，如果请求中没有token或者token内容不正确，则认为是CSRF攻击而拒绝该请求。<br>假设请求通过POST方式提交，则可以在相应的表单中增加一个隐藏域：<br><code>&lt;input type=&quot;hidden&quot; name=&quot;_toicen&quot; value=&quot;tokenvalue&quot;/&gt;</code><br>token的值通过服务端生成，表单提交后token的值通过POST请求与参数一同带到服务端，每次会话可以使用相同的token，会话过期，则token失效，攻击者因无法获取到token，也就无法伪造请求。<br>在session中添加token的实现代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">HttpSession session = request.getSession();</span><br><span class=\"line\"><span class=\"built_in\">Object</span> token = session.getAttribute(<span class=\"string\">&quot;_token&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(token == <span class=\"literal\">null</span> I I <span class=\"string\">&quot;&quot;</span>.equals(token)) &#123;</span><br><span class=\"line\">    session.setAttribute(<span class=\"string\">&quot;_token&quot;</span>, UUID.randomUUIDO .toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4、通过Referer识别</strong><br>根据HTTP协议，在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。在通常情况下，访问一个安全受限的页面的请求都来自于同一个网站。比如某银行的转账是通过用户访问<code>http://www.xxx.com/transfer.do</code>页面完成的，用户必须先登录<code>www.xxx.com</code>，然后通过单击页面上的提交按钮来触发转账事件。当用户提交请求时，该转账请求的Referer值就会是<br>提交按钮所在页面的URL（本例为<a href=\"https://link.jianshu.com/?t=http://www.xxx\">www.xxx</a>. com/<a href=\"https://link.jianshu.com/?t=http://transfer.do\">transfer.do</a>）。如果攻击者要对银行网站实施CSRF攻击，他只能在其他网站构造请求，当用户通过其他网站发送请求到银行时，该请求的Referer的值是其他网站的地址，而不是银行转账页面的地址。因此，要防御CSRF攻击，银行网站只需要对于每一个转账请求验证其Referer值即可，如果是以<code>www.xx.om</code>域名开头的地址，则说明该请求是来自银行网站自己的请求，是合法的；如果Referer是其他网站，就有可能是CSRF攻击，则拒绝该请求。<br>取得HTTP请求Referer：<br><code>String referer = request.getHeader(&quot;Referer&quot;);</code></p>\n<h3 id=\"二、总结\"><a href=\"#二、总结\" class=\"headerlink\" title=\"二、总结\"></a>二、总结</h3><p>CSRF攻击是攻击者利用用户的身份操作用户帐户的一种攻击方式，通常使用Anti CSRF Token来防御CSRF攻击，同时要注意Token的保密性和随机性。<br>并且CSRF攻击问题一般是由服务端解决。<br>注：文章大部分内容来源于《大型分布式网站架构 设计与实践》一书。</p>\n","tags":["web, csrf ,xss"]},{"title":"json 格式化 datetime, date","url":"/2019/08/13/json-format/","content":"<p>json.dumps() 对datetime.datetime, datetime.date类型数据无法识别会报错, 需要自定义encoder 来解决<br>在学习flask的源码中,了解了偏函数 ,可以创建原函数的代理,支持预设参数,还可保留原来该用方式</p>\n<p>代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> partial</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateEncoder</span>(<span class=\"params\">json.JSONEncoder</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">default</span>(<span class=\"params\">self, obj</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(obj, datetime.datetime):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj.strftime(<span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(obj, datetime.date):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj.strftime(<span class=\"string\">&quot;%Y-%m-%d&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> json.JSONEncoder.default(self, obj)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">json_dump=partial(json.dumps, ensure_ascii=<span class=\"literal\">False</span>, cls=DateEncoder)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>调用:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, <span class=\"built_in\">id</span>, sname</span>):</span></span><br><span class=\"line\">        self.<span class=\"built_in\">id</span>=<span class=\"built_in\">id</span></span><br><span class=\"line\">        self.sname=sname</span><br><span class=\"line\">        self.time=datetime.datetime.now()</span><br><span class=\"line\">        self.sname_zh=<span class=\"string\">&#x27;汉字&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self_dict = copy.deepcopy(self.__dict__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> json_dump(self_dict, indent=<span class=\"number\">2</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> User(<span class=\"number\">1</span>, <span class=\"string\">&#x27;admin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span>: <span class=\"string\">&quot;2019-08-13 14:04:21&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;sname&quot;</span>: <span class=\"string\">&quot;admin&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;sname_zh&quot;</span>: <span class=\"string\">&quot;汉字&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","tags":["json ,  partial"]},{"title":"pandas 简单使用","url":"/2019/08/14/pandas_123/","content":"<p>pandas的简单使用记录</p>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><ul>\n<li><p>由数据库查询创建</p>\n</li>\n<li><p>自定义数据创建</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">lst=[[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;apple&#x27;</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"string\">&#x27;banan&#x27;</span>]]</span><br><span class=\"line\">frm=pd.DataFrame(lst, columns=[<span class=\"string\">&#x27;tag1&#x27;</span>,<span class=\"string\">&#x27;tag2&#x27;</span>, <span class=\"string\">&#x27;tag3&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建子集 , 可指定行区间\\列名</span></span><br><span class=\"line\">frm2=frm.loc[:,[<span class=\"string\">&#x27;tag1&#x27;</span>, <span class=\"string\">&#x27;tag3&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从表中读取</span></span><br><span class=\"line\">query = Model.query.session.query(Model.local_date, Model.data_source, func.<span class=\"built_in\">sum</span>(Model.total).label(<span class=\"string\">&#x27;t&#x27;</span>), func.<span class=\"built_in\">sum</span>(Model.count).label(<span class=\"string\">&#x27;c&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">with</span> AlchemyDbUtil(db, <span class=\"string\">&#x27;statistics&#x27;</span>) <span class=\"keyword\">as</span> dbutil:</span><br><span class=\"line\">    pdf=pd.read_sql(query.statement, dbutil.conn)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h3><pre><code>* head, tail, describle()\n\n\n* 排序\n    <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">frame.sort_index(by=[<span class=\"string\">&#x27;column1&#x27;</span>],ascending=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n* 过滤\n    <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清除null</span></span><br><span class=\"line\">frm3=frm2.dropna(subset=[<span class=\"string\">&#x27;tag2&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一行数据只要有一个字段存在空值即删除</span></span><br><span class=\"line\">frm2.dropna(axis=<span class=\"number\">0</span>, how=<span class=\"string\">&quot;any&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#how 参数可选的值为 any（默认） 或者 all。any 表示一行/列有任意元素为空时即丢弃，all 一行/列所有值都为空时才丢弃。</span></span><br><span class=\"line\"><span class=\"comment\">#subset 参数表示删除时只考虑的索引或列名。</span></span><br><span class=\"line\"><span class=\"comment\">#thresh参数的类型为整数，它的作用是，比如 thresh=3，会在一行/列中至少有 3 个非空值时将其保留。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 过滤空串</span></span><br><span class=\"line\">frm3=frm3[frm3[<span class=\"string\">&#x27;tag2&#x27;</span>]!=<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按条件过滤</span></span><br><span class=\"line\">frm3=frm3[frm3[<span class=\"string\">&#x27;tag2&#x27;</span>]!=frm3[<span class=\"string\">&#x27;tag1&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取toplist</span></span><br><span class=\"line\">frm_main.nlargest(<span class=\"number\">10</span>, <span class=\"string\">&#x27;cnt&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分组后取toplist  nlargest()的第一个参数就是截取的行数。第二个参数就是依据的列名</span></span><br><span class=\"line\">frm_main.groupby(by=[<span class=\"string\">&#x27;airline_code&#x27;</span>, <span class=\"string\">&#x27;iata_code&#x27;</span>]).apply(<span class=\"keyword\">lambda</span> x: x.nlargest(<span class=\"number\">1</span>,<span class=\"string\">&quot;cnt&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n* 遍历\n\n    |tag1|    tag2|    cnt|\n    |---|---|---|\n    |6H |C3|6|\n    |8Q    |SV|4|\n    <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> idx , item  <span class=\"keyword\">in</span> frm4.iterrows():</span><br><span class=\"line\">     <span class=\"built_in\">print</span> idx, <span class=\"string\">&#x27;--&#x27;</span>, item[<span class=\"number\">0</span>], item[<span class=\"number\">1</span>], item[<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n* 导出 to_csv, clipboard ...\n\n  ![示例](http://ww3.sinaimg.cn/large/006tNc79ly1g60imisu3qj305205vglt.jpg)\n\n* 统计\n    <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 相当于groupby tag1, tag2 having count(1) &gt;2</span></span><br><span class=\"line\">frm4=frm3.groupby([<span class=\"string\">&#x27;tag1&#x27;</span>, <span class=\"string\">&#x27;tag2&#x27;</span>]).size().reset_index(name=<span class=\"string\">&#x27;cnt&#x27;</span>).query(<span class=\"string\">&#x27;cnt &gt;2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></code></pre>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><pre><code>* 动态生成\\修改列\n    <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 由其它列生成</span></span><br><span class=\"line\">frm[<span class=\"string\">&#x27;tag_short&#x27;</span>]=frm[<span class=\"string\">&#x27;tag3&#x27;</span>].<span class=\"built_in\">str</span>[:<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由其它函数生成</span></span><br><span class=\"line\">reg_dict=&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> idx <span class=\"keyword\">in</span> frm.index:</span><br><span class=\"line\">    frm.loc[idx][<span class=\"string\">&#x27;tag_new&#x27;</span>]=reg_dict.get(frm.loc[idx][<span class=\"string\">&#x27;key&#x27;</span>], <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由lambda表达式生成</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply_func</span>(<span class=\"params\">df</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg_dict.get(df[<span class=\"string\">&#x27;key&#x27;</span>], <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">frm[<span class=\"string\">&#x27;tag_new&#x27;</span>]=frm.apply(<span class=\"keyword\">lambda</span> r:apply_apairline(r), axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n* 清除空数据\n    <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># # 可以通过subset参数来删除在age和sex中含有空数据的全部行</span></span><br><span class=\"line\">df4 = df4.dropna(subset=[<span class=\"string\">&quot;age&quot;</span>, <span class=\"string\">&quot;sex&quot;</span>])</span><br></pre></td></tr></table></figure></code></pre>\n"},{"title":"py.test 测试,mock","url":"/2019/10/24/py-test/","content":"<h4 id=\"pytest使用方法\"><a href=\"#pytest使用方法\" class=\"headerlink\" title=\"pytest使用方法\"></a>pytest使用方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定测试文件</span></span><br><span class=\"line\">py.test -v test_functions.py</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定测试目录</span></span><br><span class=\"line\">py.test -v .</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"># 目录结构</span></span><br><span class=\"line\"><span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"string\">  .</span></span><br><span class=\"line\"><span class=\"string\">  ├── __init__.py</span></span><br><span class=\"line\"><span class=\"string\">  ├── functions.py   # 方法文件</span></span><br><span class=\"line\"><span class=\"string\">  ├── test_app.py    # 测试文件</span></span><br><span class=\"line\"><span class=\"string\">  └── test_functions.py   # 测试文件</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># functions.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multiple</span>(<span class=\"params\">x,y </span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*y +<span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_and_multiply</span>(<span class=\"params\">x,y </span>):</span></span><br><span class=\"line\">    addition=x+y</span><br><span class=\"line\">    multi=multiple(x,y)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (addition, multi)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test_functions.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_add_and_multiply</span>():</span></span><br><span class=\"line\">    x,y=<span class=\"number\">3</span>,<span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    addi, multi=add_and_multiply(x,y )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> addi==<span class=\"number\">8</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> multi==<span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要mock的方法要写全路径</span></span><br><span class=\"line\"><span class=\"meta\">@mock.patch(<span class=\"params\"><span class=\"string\">&#x27;test.functions.multiple&#x27;</span>, return_value=<span class=\"number\">15</span> </span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_add_and_multiply_mock</span>(<span class=\"params\">mock_func</span>):</span></span><br><span class=\"line\">    x = <span class=\"number\">3</span></span><br><span class=\"line\">    y = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"comment\"># 要mock的方法需指定绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\"># test.functions.multiple=mock.Mock(return_value=15)</span></span><br><span class=\"line\">    addi, multi= add_and_multiply(x, y)</span><br><span class=\"line\">    print()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> addi == <span class=\"number\">8</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> multi == <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_add_and_multiply_mock2</span>():</span></span><br><span class=\"line\">    x = <span class=\"number\">3</span></span><br><span class=\"line\">    y = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"comment\"># 要mock的方法需指定绝对路径</span></span><br><span class=\"line\">    test.functions.multiple=mock.Mock(return_value=<span class=\"number\">15</span>)</span><br><span class=\"line\">    addi, multi= add_and_multiply(x, y)</span><br><span class=\"line\">    print()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> addi == <span class=\"number\">8</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> multi == <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>&#39;&#39;&#39;bash</p>\n<h4 id=\"指定测试文件\"><a href=\"#指定测试文件\" class=\"headerlink\" title=\"指定测试文件\"></a>指定测试文件</h4><p>py.test -v test_functions.py</p>\n<h4 id=\"指定测试目录\"><a href=\"#指定测试目录\" class=\"headerlink\" title=\"指定测试目录\"></a>指定测试目录</h4><p>py.test -v .</p>\n<p>py.test -v test_functions.py<br>collected 3 items</p>\n<p>test_functions.py::test_add_and_multiply FAILED               [ 33%]<br>test_functions.py::test_add_and_multiply_mock PASSED          [ 66%]<br>test_functions.py::test_add_and_multiply_mock2 PASSED         [100%]</p>\n<p>=============== FAILURES ============<br>___________test_add_and_multiply _____</p>\n<pre><code>def test_add_and_multiply():\n    x,y=3,5\n\n    addi, multi=add_and_multiply(x,y )\n\n    assert addi==8</code></pre>\n<blockquote>\n<pre><code>  assert multi==15</code></pre>\n<p>E       assert 25 == 15<br>E         -25<br>E         +15</p>\n</blockquote>\n<p>test_functions.py:21: AssertionError<br>=============== 1 failed, 2 passed in 0.14s ===========</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>","tags":["pytest, mock"]},{"title":"jsonify 支持对象类型","url":"/2019/08/27/jsonify/","content":"<h3 id=\"使flask-jsonify-支持对象类型的dump\"><a href=\"#使flask-jsonify-支持对象类型的dump\" class=\"headerlink\" title=\"使flask.jsonify 支持对象类型的dump\"></a>使flask.jsonify 支持对象类型的dump</h3><pre><code>flask.jsonify 默认支持字典类型的参数, 返回json化的字符串, mimetype 为 application/json, 要注意的是它不支持list入我们自定义的对象 , 下面尝试扩展其功能\n\nflask.wrapers.Response.data\n\nwith app.test_request_context(&#39;/&#39;, method=&#39;POST&#39;) as new_context:\n    print jsonify(a=[1,2,3]).data</code></pre>\n","tags":["web, flask ,jsonify"]},{"title":"py37 pandas升级后提示缺少bz2","url":"/2020/11/20/py37-pandas-bz2/","content":"<h4 id=\"py37-pandas升级后提示缺少bz2\"><a href=\"#py37-pandas升级后提示缺少bz2\" class=\"headerlink\" title=\"py37 pandas升级后提示缺少bz2\"></a>py37 pandas升级后提示缺少bz2</h4><blockquote>\n<p>参考 <a href=\"https://blog.csdn.net/u014589856/article/details/89175609\">解决ModuleNotFoundError: No module named &#39;_bz2&#39;</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在python3环境中默认安装的pandas包是最新的像, 像1.14.. ,而高版本的pandas0.23以后,会将bz2的引用放在头部 , 低版本的会在方法内按需引用 , 所以用高版本,会依赖bz2</span><br><span class=\"line\">需要系统级安装依赖来解决,如 yum install bzip2 libbz2-dev , 而对于已经安装好的python环境, 可以参考以下网友分享的方法, 大概步骤如下:</span><br><span class=\"line\">1  &#x2F;python36&#x2F;lib&#x2F;python3.6&#x2F;lib-dynload&#x2F;x _bz2.cpython-37m-x86_64-linux-gnu.so</span><br><span class=\"line\">2  ln -s &#x2F;usr&#x2F;lib64&#x2F;libbz2.so.1.0.6 &#x2F;usr&#x2F;lib64&#x2F;libbz2.so.1.0      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pandas_bz220201120_6.png\" loading=\"lazy\"></p>\n<h5 id=\"39-field-39-is-both-an-index-level-and-a-column-label-which-is-ambiguous-错误-需要重建-index\"><a href=\"#39-field-39-is-both-an-index-level-and-a-column-label-which-is-ambiguous-错误-需要重建-index\" class=\"headerlink\" title=\"&#39;field&#39; is both an index level and a column label, which is ambiguous. 错误 , 需要重建 index\"></a>&#39;field&#39; is both an index level and a column label, which is ambiguous. 错误 , 需要重建 index</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pandas0.23.1 以后版本,在pandas.merge或其它方法中会报 &#39;field&#39; is both an index level and a column label, which is ambiguous. 错误 , 需要重建 index</span><br><span class=\"line\">subfrm1 &#x3D; subfrm1.reset_index(drop&#x3D;True)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","tags":["python3.7, virtualenv , bz2"]},{"title":"转载sqlalchemy 简单使用","url":"/2019/08/20/sqlalchemy_123/","content":"<p><a href=\"https://www.jianshu.com/p/8d085e2f2657\">转载自jianshu https://www.jianshu.com/p/8d085e2f2657</a></p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/0d234e14b5d3\">SQLAlchemy ORM教程之一：Create</a></li>\n<li><a href=\"https://www.jianshu.com/p/8d085e2f2657\">SQLAlchemy ORM教程之二：Query （本文）</a></li>\n<li><a href=\"https://www.jianshu.com/p/9771b0a3e589\">SQLAlchemy ORM教程之三：Relationship</a></li>\n</ul>\n<hr>\n<p>这是继<a href=\"https://www.jianshu.com/p/0d234e14b5d3\">SQLAlchemy ORM教程之一：Create</a>后的第二篇教程。在上一篇中我们主要是解决了如何配置ORM系统，建立从类到表的映射的过程，以及如何插入和修改记录。在这个教程中我们主要解决使用的问题。</p>\n<h3 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query\"></a>Query</h3><p><code>Session</code>的<code>query</code>函数会返回一个<code>Query</code>对象。<code>query</code>函数可以接受多种参数类型。可以是类，或者是类的instrumented <strong>descriptor</strong>。下面的这个例子取出了所有的<code>User</code>记录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"keyword\">for</span> instance <span class=\"keyword\">in</span> session.query(User).order_by(User.id):</span><br><span class=\"line\">...     <span class=\"built_in\">print</span>(instance.name, instance.fullname)</span><br><span class=\"line\">ed Ed Jones</span><br><span class=\"line\">wendy Wendy Williams</span><br><span class=\"line\">mary Mary Contrary</span><br><span class=\"line\">fred Fred Flinstone</span><br></pre></td></tr></table></figure>\n<p><code>Query</code>也接受ORM-instrumented descriptors作为参数。当多个参数传入时，返回结果为以同样顺序排列的tuples</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"keyword\">for</span> name, fullname <span class=\"keyword\">in</span> session.query(User.name, User.fullname):</span><br><span class=\"line\">...     <span class=\"built_in\">print</span>(name, fullname)</span><br><span class=\"line\">ed Ed Jones</span><br><span class=\"line\">wendy Wendy Williams</span><br><span class=\"line\">mary Mary Contrary</span><br><span class=\"line\">fred Fred Flinstone</span><br></pre></td></tr></table></figure>\n<p><code>Query</code>返回的tuples由<code>KeyedTuple</code>这个类提供，其成员除了用下标访问意外，还可以视为实例变量来获取。对应的变量的名称与被查询的类变量名称一样，如下例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> session.query(User, User.name).all():</span><br><span class=\"line\">...    <span class=\"built_in\">print</span>(row.User, row.name)</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;ed&#x27;</span>, fullname=<span class=\"string\">&#x27;Ed Jones&#x27;</span>, password=<span class=\"string\">&#x27;f8s7ccs&#x27;</span>)&gt; ed</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;wendy&#x27;</span>, fullname=<span class=\"string\">&#x27;Wendy Williams&#x27;</span>, password=<span class=\"string\">&#x27;foobar&#x27;</span>)&gt; wendy</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;mary&#x27;</span>, fullname=<span class=\"string\">&#x27;Mary Contrary&#x27;</span>, password=<span class=\"string\">&#x27;xxg527&#x27;</span>)&gt; mary</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;fred&#x27;</span>, fullname=<span class=\"string\">&#x27;Fred Flinstone&#x27;</span>, password=<span class=\"string\">&#x27;blah&#x27;</span>)&gt; fred</span><br></pre></td></tr></table></figure>\n<p>你可以通过<code>label()</code>来制定descriptor对应实例变量的名称</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> session.query(User.name.label(<span class=\"string\">&#x27;name_label&#x27;</span>)).all():</span><br><span class=\"line\">...    <span class=\"built_in\">print</span>(row.name_label)</span><br><span class=\"line\">ed</span><br><span class=\"line\">wendy</span><br><span class=\"line\">mary</span><br><span class=\"line\">fred</span><br></pre></td></tr></table></figure>\n<p>而对于类参数而言，要实现同样的定制需要使用<code>aliased</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from sqlalchemy.orm import aliased</span><br><span class=\"line\">&gt;&gt;&gt; user_alias = aliased(User, name=<span class=\"string\">&#x27;user_alias&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;&gt;&gt; <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> session.query(user_alias, user_alias.name).all():</span><br><span class=\"line\">...    <span class=\"built_in\">print</span>(row.user_alias)</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;ed&#x27;</span>, fullname=<span class=\"string\">&#x27;Ed Jones&#x27;</span>, password=<span class=\"string\">&#x27;f8s7ccs&#x27;</span>)&gt;</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;wendy&#x27;</span>, fullname=<span class=\"string\">&#x27;Wendy Williams&#x27;</span>, password=<span class=\"string\">&#x27;foobar&#x27;</span>)&gt;</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;mary&#x27;</span>, fullname=<span class=\"string\">&#x27;Mary Contrary&#x27;</span>, password=<span class=\"string\">&#x27;xxg527&#x27;</span>)&gt;</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;fred&#x27;</span>, fullname=<span class=\"string\">&#x27;Fred Flinstone&#x27;</span>, password=<span class=\"string\">&#x27;blah&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure>\n<p>基本的查询操作除了上面这些之外，还包括OFFSET和LIMIT，这个可以通过Python的array slice来完成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"keyword\">for</span> u <span class=\"keyword\">in</span> session.query(User).order_by(User.id)[1:3]:</span><br><span class=\"line\">...    <span class=\"built_in\">print</span>(u)</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;wendy&#x27;</span>, fullname=<span class=\"string\">&#x27;Wendy Williams&#x27;</span>, password=<span class=\"string\">&#x27;foobar&#x27;</span>)&gt;</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;mary&#x27;</span>, fullname=<span class=\"string\">&#x27;Mary Contrary&#x27;</span>, password=<span class=\"string\">&#x27;xxg527&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure>\n<p>上述过程实际上只涉及了整体取出的操作，而没有进行筛选，筛选常用的函数是<code>filter_by</code>和<code>filter</code>。其中后者比起前者要更灵活一些，你可以在后者的参数中使用python的运算符。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"keyword\">for</span> name, <span class=\"keyword\">in</span> session.query(User.name).\\</span><br><span class=\"line\">...             filter_by(fullname=<span class=\"string\">&#x27;Ed Jones&#x27;</span>):</span><br><span class=\"line\">...    <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\">ed</span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"keyword\">for</span> name, <span class=\"keyword\">in</span> session.query(User.name).\\</span><br><span class=\"line\">...             filter(User.fullname==<span class=\"string\">&#x27;Ed Jones&#x27;</span>):</span><br><span class=\"line\">...    <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\">ed</span><br></pre></td></tr></table></figure>\n<p>注意<code>Query</code>对象是<strong>generative</strong>的，这意味你可以把他们串接起来调用，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> session.query(User).\\</span><br><span class=\"line\">...          filter(User.name==<span class=\"string\">&#x27;ed&#x27;</span>).\\</span><br><span class=\"line\">...          filter(User.fullname==<span class=\"string\">&#x27;Ed Jones&#x27;</span>):</span><br><span class=\"line\">...    <span class=\"built_in\">print</span>(user)</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;ed&#x27;</span>, fullname=<span class=\"string\">&#x27;Ed Jones&#x27;</span>, password=<span class=\"string\">&#x27;f8s7ccs&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure>\n<p>串接的<code>filter</code>之间是<strong>与</strong>的关系。</p>\n<h3 id=\"常用的filter操作符\"><a href=\"#常用的filter操作符\" class=\"headerlink\" title=\"常用的filter操作符\"></a>常用的filter操作符</h3><p>下面的这些操作符可以应用在<code>filter</code>函数中</p>\n<ul>\n<li><code>equals</code>:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">query.filter(User.name == <span class=\"string\">&#x27;ed&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>not equals</code>:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">query.filter(User.name != <span class=\"string\">&#x27;ed&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LIKE</code>:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">query.filter(User.name.like(<span class=\"string\">&#x27;%ed%&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>IN</code>:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">query.filter(User.name.in_([<span class=\"string\">&#x27;ed&#x27;</span>, <span class=\"string\">&#x27;wendy&#x27;</span>, <span class=\"string\">&#x27;jack&#x27;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># works with query objects too:</span></span><br><span class=\"line\">query.filter(User.name.in_(</span><br><span class=\"line\">        session.query(User.name).filter(User.name.like(<span class=\"string\">&#x27;%ed%&#x27;</span>))</span><br><span class=\"line\">))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>NOT IN</code>:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">query.filter(~User.name.in_([<span class=\"string\">&#x27;ed&#x27;</span>, <span class=\"string\">&#x27;wendy&#x27;</span>, <span class=\"string\">&#x27;jack&#x27;</span>]))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>IS NULL</code>:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">query.filter(User.name == None)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># alternatively, if pep8/linters are a concern</span></span><br><span class=\"line\">query.filter(User.name.is_(None))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>IS NOT NULL</code>:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">query.filter(User.name != None)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># alternatively, if pep8/linters are a concern</span></span><br><span class=\"line\">query.filter(User.name.isnot(None))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>AND</code>:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># use and_()</span></span><br><span class=\"line\">from sqlalchemy import and_</span><br><span class=\"line\">query.filter(and_(User.name == <span class=\"string\">&#x27;ed&#x27;</span>, User.fullname == <span class=\"string\">&#x27;Ed Jones&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># or send multiple expressions to .filter()</span></span><br><span class=\"line\">query.filter(User.name == <span class=\"string\">&#x27;ed&#x27;</span>, User.fullname == <span class=\"string\">&#x27;Ed Jones&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># or chain multiple filter()/filter_by() calls</span></span><br><span class=\"line\">query.filter(User.name == <span class=\"string\">&#x27;ed&#x27;</span>).filter(User.fullname == <span class=\"string\">&#x27;Ed Jones&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>OR</code>:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import or_</span><br><span class=\"line\">query.filter(or_(User.name == <span class=\"string\">&#x27;ed&#x27;</span>, User.name == <span class=\"string\">&#x27;wendy&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>MATCH</code>:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">query.filter(User.name.match(<span class=\"string\">&#x27;wendy&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"返回列表-List-和单项-Scalar\"><a href=\"#返回列表-List-和单项-Scalar\" class=\"headerlink\" title=\"返回列表(List)和单项(Scalar)\"></a>返回列表(List)和单项(Scalar)</h3><p>很多<code>Query</code>的方法执行了SQL命令并返回了取出的数据库结果。</p>\n<ul>\n<li><code>all()</code>返回一个列表:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; query = session.query(User).filter(User.name.like(<span class=\"string\">&#x27;%ed&#x27;</span>)).order_by(User.id)</span><br><span class=\"line\">SQL&gt;&gt;&gt; query.all()</span><br><span class=\"line\">[&lt;User(name=<span class=\"string\">&#x27;ed&#x27;</span>, fullname=<span class=\"string\">&#x27;Ed Jones&#x27;</span>, password=<span class=\"string\">&#x27;f8s7ccs&#x27;</span>)&gt;,</span><br><span class=\"line\">      &lt;User(name=<span class=\"string\">&#x27;fred&#x27;</span>, fullname=<span class=\"string\">&#x27;Fred Flinstone&#x27;</span>, password=<span class=\"string\">&#x27;blah&#x27;</span>)&gt;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>first()</code>返回至多一个结果，而且以单项形式，而不是只有一个元素的tuple形式返回这个结果.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; query.first()</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;ed&#x27;</span>, fullname=<span class=\"string\">&#x27;Ed Jones&#x27;</span>, password=<span class=\"string\">&#x27;f8s7ccs&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>one()</code>返回且仅返回一个查询结果。当结果的数量不足一个或者多于一个时会报错。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; user = query.one()</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">...</span><br><span class=\"line\">MultipleResultsFound: Multiple rows were found <span class=\"keyword\">for</span> one()</span><br></pre></td></tr></table></figure>\n<p>没有查找到结果时：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; user = query.filter(User.id == <span class=\"number\">99</span>).one()</span><br><span class=\"line\">Traceback (most recent call last)<span class=\"symbol\">:</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"symbol\">NoResultFound:</span> No row was found <span class=\"keyword\">for</span> one()</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>one_or_none()</code>：从名称可以看出，当结果数量为0时返回<code>None</code>， 多于1个时报错</p>\n</li>\n<li><p><code>scalar()</code>和<code>one()</code>类似，但是返回单项而不是tuple</p>\n</li>\n</ul>\n<h3 id=\"嵌入使用SQL\"><a href=\"#嵌入使用SQL\" class=\"headerlink\" title=\"嵌入使用SQL\"></a>嵌入使用SQL</h3><p>你可以在<code>Query</code>中通过<code>text()</code>使用SQL语句。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from sqlalchemy import text</span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> session.query(User).\\</span><br><span class=\"line\">...             filter(text(<span class=\"string\">&quot;id&lt;224&quot;</span>)).\\</span><br><span class=\"line\">...             order_by(text(<span class=\"string\">&quot;id&quot;</span>)).all():</span><br><span class=\"line\">...     <span class=\"built_in\">print</span>(user.name)</span><br><span class=\"line\">ed</span><br><span class=\"line\">wendy</span><br><span class=\"line\">mary</span><br><span class=\"line\">fred</span><br></pre></td></tr></table></figure>\n<p>除了上面这种直接将参数写进字符串的方式外，你还可以通过<code>params()</code>方法来传递参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; session.query(User).filter(text(<span class=\"string\">&quot;id&lt;:value and name=:name&quot;</span>)).\\</span><br><span class=\"line\">...     params(value=224, name=<span class=\"string\">&#x27;fred&#x27;</span>).order_by(User.id).one()</span><br><span class=\"line\">&lt;User(name=<span class=\"string\">&#x27;fred&#x27;</span>, fullname=<span class=\"string\">&#x27;Fred Flinstone&#x27;</span>, password=<span class=\"string\">&#x27;blah&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure>\n<p>并且，你可以直接使用完整的SQL语句，但是要注意将表名和列明写正确。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; session.query(User).from_statement(</span><br><span class=\"line\">...                     text(<span class=\"string\">&quot;SELECT * FROM users where name=:name&quot;</span>)).\\</span><br><span class=\"line\">...                     params(name=<span class=\"string\">&#x27;ed&#x27;</span>).all()</span><br><span class=\"line\">[&lt;User(name=<span class=\"string\">&#x27;ed&#x27;</span>, fullname=<span class=\"string\">&#x27;Ed Jones&#x27;</span>, password=<span class=\"string\">&#x27;f8s7ccs&#x27;</span>)&gt;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"计数\"><a href=\"#计数\" class=\"headerlink\" title=\"计数\"></a>计数</h3><p><code>Query</code>定义了一个很方便的计数函数<code>count()</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; session.query(User).filter(User.name.like(<span class=\"string\">&#x27;%ed&#x27;</span>)).count()</span><br><span class=\"line\">SELECT count(*) AS count_1</span><br><span class=\"line\">FROM (SELECT users.id AS users_id,</span><br><span class=\"line\">                users.name AS users_name,</span><br><span class=\"line\">                users.fullname AS users_fullname,</span><br><span class=\"line\">                users.password AS users_password</span><br><span class=\"line\">FROM users</span><br><span class=\"line\">WHERE users.name LIKE ?) AS anon_1</span><br><span class=\"line\">(<span class=\"string\">&#x27;%ed&#x27;</span>,)</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<p>注意上面我们同时列出了实际的SQL指令。在SQLAlchemy中，我们总是将被计数的查询打包成一个子查询，然后对这个子查询进行计数。即便是最简单的<code>SELECT count(*) FROM table</code>，也会如此处理。为了更精细的控制计数过程，我们可以采用<code>func.count()</code>这个函数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from sqlalchemy import func</span><br><span class=\"line\">SQL&gt;&gt;&gt; session.query(func.count(User.name).label(<span class=\"string\">&#x27;ucnt&#x27;</span>), User.name).group_by(User.name).all()</span><br><span class=\"line\">SELECT count(users.name) AS count_1, users.name AS users_name</span><br><span class=\"line\">FROM users GROUP BY users.name</span><br><span class=\"line\">()</span><br><span class=\"line\">[(1, u<span class=\"string\">&#x27;ed&#x27;</span>), (1, u<span class=\"string\">&#x27;fred&#x27;</span>), (1, u<span class=\"string\">&#x27;mary&#x27;</span>), (1, u<span class=\"string\">&#x27;wendy&#x27;</span>)]</span><br></pre></td></tr></table></figure>\n<p>为了实现最简单的<code>SELECT count(*) FROM table</code>，我们可以如下调用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; session.query(func.count(<span class=\"string\">&#x27;*&#x27;</span>).label(<span class=\"string\">&#x27;ucnt&#x27;</span>)).select_from(User).scalar()</span><br><span class=\"line\">SELECT count(?) AS count_1</span><br><span class=\"line\">FROM users</span><br><span class=\"line\">(<span class=\"string\">&#x27;*&#x27;</span>,)</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<p>如果我们对<code>User</code>的主键进行计数，那么<code>select_from</code>也可以省略。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; session.query(func.count(User.id)).scalar()</span><br><span class=\"line\">SELECT count(users.id) AS count_1</span><br><span class=\"line\">FROM users</span><br><span class=\"line\">()</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<h4 id=\"在下一篇教程里面我们将会介绍SQLAlchemy对于『关系』的处理方式，以及针对关系的更加复杂的查询。\"><a href=\"#在下一篇教程里面我们将会介绍SQLAlchemy对于『关系』的处理方式，以及针对关系的更加复杂的查询。\" class=\"headerlink\" title=\"在下一篇教程里面我们将会介绍SQLAlchemy对于『关系』的处理方式，以及针对关系的更加复杂的查询。\"></a>在下一篇教程里面我们将会介绍SQLAlchemy对于『关系』的处理方式，以及针对关系的更加复杂的查询。</h4><p>教程的第三部分传送门<a href=\"https://www.jianshu.com/p/9771b0a3e589\">SQLAlchemy ORM教程之三：Relationship</a></p>\n","tags":["sqlalchemy, orm"]},{"title":"vuejs 列表中的元素,要动态绑定多个样式","url":"/2019/09/20/vue-class/","content":"<p>用以下的方法 没有成功</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;&#123; done: item.handled==1 , ignore: item.handled==2, ignore2: item.handled==3 &#125;&quot;</span> &gt;</span><br></pre></td></tr></table></figure>\n<p>后来发现下面的方法更稳拓些 , 也方便调整</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;[gethandle_class(item.handled), getstatus_class(item.status)] &quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    gethandle_class: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">handle_v</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;1&quot;</span>: <span class=\"string\">&quot;done&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;2&quot;</span>: <span class=\"string\">&quot;ig&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;3&quot;</span>: <span class=\"string\">&quot;ig&quot;</span>,</span><br><span class=\"line\">          &#125;[handle_v]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","tags":["vuejs, class"]},{"title":"BundleAnalyzer Webpack externals配置,优化chunk-vendor大小,提高初始加载速度","url":"/2021/01/25/vue-webpacket-externals/","content":"<blockquote>\n<p>调整了很多次终于见到效果 , 发现最根本的问题在于 被external的包是否依赖Vue, 如果依赖就要把Vue先加external </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue.config.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; BundleAnalyzerPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-bundle-analyzer&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  publicPath: <span class=\"string\">&#x27;/saas-manager&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 只用加以下节点 , main.js当中不用调整  </span></span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">    externals: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用elementui 必须要先中vue(因为elementui依赖vue, 而在html文件中这两个资源也必需写在&lt;div id=&quot;app&quot;&gt;&lt;/div&gt; 之前 ),</span></span><br><span class=\"line\">      vue: <span class=\"string\">&#x27;Vue&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;element-ui&#x27;</span>: <span class=\"string\">&#x27;ELEMENT&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 更改编译输出的文件名增加hashcode , 以强制浏览器无法缓存, 保证每次修改能及时看到效果   </span></span><br><span class=\"line\">  chainWebpack: <span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    config.output.filename(<span class=\"string\">&#x27;js/[name].[hash:6].js&#x27;</span>)</span><br><span class=\"line\">    .chunkFilename(<span class=\"string\">&#x27;js/[name].[hash:6].js&#x27;</span>)</span><br><span class=\"line\">    .end();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 每次yarn serve 新开浏览器显示 BundleAnalyzer(各资源文件大小占比) </span></span><br><span class=\"line\">  config</span><br><span class=\"line\">    .plugin(<span class=\"string\">&#x27;webpack-bundle-analyzer&#x27;</span>)</span><br><span class=\"line\">    .use(BundleAnalyzerPlugin)</span><br><span class=\"line\">    .init(<span class=\"function\">(<span class=\"params\">Plugin</span>) =&gt;</span> <span class=\"keyword\">new</span> Plugin());</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p><em>js文件未做任何调整</em> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">main.js </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-ui&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> VueAxios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-axios&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> elementUtils <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-element-utils&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下两个资料在index.html 中引用csn资源, 以减少打包后的文件大小</span></span><br><span class=\"line\"><span class=\"comment\">// import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">// import &#x27;bootstrap/dist/css/bootstrap.min.css&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(ElementUI, &#123;</span><br><span class=\"line\">  size: <span class=\"string\">&#x27;small&#x27;</span>,</span><br><span class=\"line\">  zIndex: <span class=\"number\">3000</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">index.html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    // 外部css </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-ui/2.14.1/theme-chalk/index.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  bootstrap3 会有graph,所以使用bs3   --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">// 外部js  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-ui/2.14.1/index.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","tags":["BundleAnalyzer,  Webpack externals, chunk-vendor"]},{"url":"/css/custom.css","content":"@media screen and (min-width: 1280px) {\n    .container {\n        max-width: 1400px;\n    }\n\n\n    .column.is-3-widescreen {\n        flex: none;\n        width: 15%;\n    }\n\n    .column.is-3-widescreen {\n        flex: none;\n        width: 15%;\n    }\n\n    .column.is-6-widescreen {\n        flex: none;\n        width: 65%;\n    }\n}\n\n"},{"title":"tags","url":"/tags/index.html","content":""}]